package plugin

import (
	"github.com/mbarreca/gosix/api"
	"github.com/mbarreca/gosix/client"
	"github.com/mbarreca/gosix/consumer"
	"github.com/mbarreca/gosix/models"
)

type PluginConfig struct {
	client *client.Client
	c      *consumer.Consumer
}

// Constructor - You *shouldn't* be using this
func New(c *client.Client, consumer *consumer.Consumer) *PluginConfig {
	return &PluginConfig{client: c, c: consumer}
}

// Gets the PluginConfigs attached to an ID
// id -> A specific PluginConfig to get
func (p *PluginConfig) Get(id string) (models.PluginConfig, error) {
	resp, err := api.API[models.PluginConfig, models.Get](id, "", models.PluginConfig{}, p.client)
	if err != nil {
		return models.PluginConfig{}, err
	}
	return *resp.(models.Object[models.PluginConfig]).Value, nil
}

// Gets all PluginConfig
func (p *PluginConfig) GetAll() ([]models.PluginConfig, error) {
	resp, err := api.API[models.PluginConfig, models.Get]("", "", models.PluginConfig{}, p.client)
	if err != nil {
		return nil, err
	}
	var ret []models.PluginConfig
	vals := resp.(models.All[models.PluginConfig])
	for _, val := range *vals.Objects {
		ret = append(ret, *val.Value)
	}
	return ret, nil
}

// Create an PluginConfig, leave the ID blank for an autogenerated ID
// id -> ID of the PluginConfig
// value -> PluginConfig Object
func (p *PluginConfig) Create(id string, value models.PluginConfig) error {
	_, err := api.API[models.PluginConfig, models.Create](id, "", value, p.client)
	if err != nil {
		return err
	}
	return nil
}

// Update a PluginConfig
// id -> ID of the PluginConfig
// value -> PluginConfig Object
func (p *PluginConfig) Update(id string, value models.PluginConfig) error {
	_, err := api.API[models.PluginConfig, models.Update](id, "", value, p.client)
	if err != nil {
		return err
	}
	return nil
}

// Delete a PluginConfig
// id -> ID of the PluginConfig
func (p *PluginConfig) Delete(id string) error {
	_, err := api.API[models.PluginConfig, models.Delete](id, "", models.PluginConfig{}, p.client)
	if err != nil {
		return err
	}
	return nil
}
