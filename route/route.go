package route

import (
	"github.com/mbarreca/gosix/api"
	"github.com/mbarreca/gosix/client"
	"github.com/mbarreca/gosix/consumer"
	"github.com/mbarreca/gosix/library"
	"github.com/mbarreca/gosix/models"
)

type Route struct {
	client *client.Client
	c      *consumer.Consumer
}

// Constructor - You *shouldn't* be using this
func New(c *client.Client, consumer *consumer.Consumer) *Route {
	return &Route{client: c, c: consumer}
}

// Gets the Route attached to an ID
// id -> A specific Route to get
func (r *Route) Get(id string) (models.Route, error) {
	resp, err := api.API[models.Route, models.Get](id, "", models.Route{}, r.client)
	if err != nil {
		return models.Route{}, err
	}
	return *resp.(models.Object[models.Route]).Value, nil
}

// Get all routes
func (r *Route) GetAll() ([]models.Route, error) {
	resp, err := api.API[models.Route, models.Get]("", "", models.Route{}, r.client)
	if err != nil {
		return nil, err
	}
	var ret []models.Route
	credentials := resp.(models.All[models.Route])
	for _, credential := range *credentials.Objects {
		ret = append(ret, *credential.Value)
	}
	return ret, nil
}

// Create a Route, leave the ID blank for an autogenerated ID
// id -> ID of the route
// route -> Route Object
func (r *Route) Create(id string, route models.Route) error {
	_, err := api.API[models.Route, models.Create](id, "", route, r.client)
	if err != nil {
		return err
	}
	return nil
}

// Update a route
// id -> ID of the route
// route -> Route Object
func (r *Route) Update(id string, route models.Route) error {
	_, err := api.API[models.Route, models.Update](id, "", route, r.client)
	if err != nil {
		return err
	}
	return nil
}

// Delete a Route
// id -> ID of the Route
func (r *Route) Delete(id string) error {
	_, err := api.API[models.Route, models.Delete](id, "", models.Route{}, r.client)
	if err != nil {
		return err
	}
	return nil
}

/*
	Plugin Specific Functions
*/

// This will get the plugin attached to a consumer and write it into plugin
// id -> The id of the consumer
// plugin -> The plugin object (used only for type)
func (r *Route) GetPlugin(id string, plugin any) (any, error) {
	value, err := r.Get(id)
	if err != nil {
		return nil, err
	}
	return library.GetPlugin(value.Plugins, plugin)
}

// This will add the plugin if it doesn't exist or update it if it does
// id -> The id of the route
// plugin -> The plugin object
func (r *Route) AddPlugin(id string, plugin any) error {
	value, err := r.Get(id)
	if err != nil {
		return err
	}
	p, err := library.AddPlugin(value.Plugins, plugin)
	if err != nil {
		return err
	}
	value.Plugins = p
	if err := r.Update(value.ID, value); err != nil {
		return err
	}
	return nil
}

// This will delete the plugin if it exists, if it doesn't it will still return no error
// id -> The id of the consumer
// plugin -> The plugin object (used only for type)
func (r *Route) DeletePlugin(id string, plugin any) error {
	value, err := r.Get(id)
	if err != nil {
		return err
	}
	p, err := library.DeletePlugin(value.Plugins, plugin)
	if err != nil {
		return err
	}
	value.Plugins = p
	if err := r.Update(value.ID, value); err != nil {
		return err
	}
	return nil
}
