package upstream

import (
	"github.com/mbarreca/gosix/api"
	"github.com/mbarreca/gosix/client"
	"github.com/mbarreca/gosix/consumer"
	"github.com/mbarreca/gosix/models"
)

type Upstream struct {
	client *client.Client
	c      *consumer.Consumer
}

// Constructor - You *shouldn't* be using this
func New(c *client.Client, consumer *consumer.Consumer) *Upstream {
	return &Upstream{client: c, c: consumer}
}

// Gets the upstreams attached to an ID
// id -> A specific upstream to get
func (u *Upstream) Get(id string) (models.Upstream, error) {
	resp, err := api.API[models.Upstream, models.Get](id, "", models.Upstream{}, u.client)
	if err != nil {
		return models.Upstream{}, err
	}
	return *resp.(models.Object[models.Upstream]).Value, nil
}

// Gets all upstreams
func (u *Upstream) GetAll() ([]models.Upstream, error) {
	resp, err := api.API[models.Upstream, models.Get]("", "", models.Upstream{}, u.client)
	if err != nil {
		return nil, err
	}
	var ret []models.Upstream
	vals := resp.(models.All[models.Upstream])
	for _, val := range *vals.Objects {
		ret = append(ret, *val.Value)
	}
	return ret, nil
}

// Create an upstream, leave the ID blank for an autogenerated ID
// id -> ID of the upstream
// value -> Upstream Object
func (u *Upstream) Create(id string, value models.Upstream) error {
	_, err := api.API[models.Upstream, models.Create](id, "", value, u.client)
	if err != nil {
		return err
	}
	return nil
}

// Update an Upstream
// id -> ID of the upstream
// value -> Upstream Object
func (u *Upstream) Update(id string, value models.Upstream) error {
	_, err := api.API[models.Upstream, models.Update](id, "", value, u.client)
	if err != nil {
		return err
	}
	return nil
}

// Delete an Upstream
// id -> ID of the upstream
func (u *Upstream) Delete(id string) error {
	_, err := api.API[models.Upstream, models.Delete](id, "", models.Upstream{}, u.client)
	if err != nil {
		return err
	}
	return nil
}
