package ssl

import (
	"github.com/mbarreca/gosix/api"
	"github.com/mbarreca/gosix/client"
	"github.com/mbarreca/gosix/consumer"
	"github.com/mbarreca/gosix/models"
)

type SSL struct {
	client *client.Client
	c      *consumer.Consumer
}

// Constructor - You *shouldn't* be using this
func New(c *client.Client, consumer *consumer.Consumer) *SSL {
	return &SSL{client: c, c: consumer}
}

// Gets the SSL attached to an ID
// id -> ID of the SSL
func (s *SSL) Get(id string) (models.SSL, error) {
	resp, err := api.API[models.SSL, models.Get](id, "", models.SSL{}, s.client)
	if err != nil {
		return models.SSL{}, err
	}
	return *resp.(models.Object[models.SSL]).Value, nil
}

// Get all SSLs
func (s *SSL) GetAll() ([]models.SSL, error) {
	resp, err := api.API[models.SSL, models.Get]("", "", models.SSL{}, s.client)
	if err != nil {
		return nil, err
	}
	var ret []models.SSL
	credentials := resp.(models.All[models.SSL])
	for _, credential := range *credentials.Objects {
		ret = append(ret, *credential.Value)
	}
	return ret, nil
}

// Create an SSL, leave the ID blank for an autogenerated ID
// id -> ID of the SSL
// ssl -> SSL Rule Object
func (s *SSL) Create(id string, service models.SSL) error {
	_, err := api.API[models.SSL, models.Create](id, "", service, s.client)
	if err != nil {
		return err
	}
	return nil
}

// Update a SSL
// id -> ID of the SSL
// ssl -> SSL Rule Object
func (s *SSL) Update(id string, service models.SSL) error {
	_, err := api.API[models.SSL, models.Update](id, "", service, s.client)
	if err != nil {
		return err
	}
	return nil
}

// Delete an SSL
// id -> ID of the SSL
func (s *SSL) Delete(id string) error {
	_, err := api.API[models.SSL, models.Delete](id, "", models.SSL{}, s.client)
	if err != nil {
		return err
	}
	return nil
}
