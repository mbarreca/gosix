package globalrule

import (
	"errors"

	"github.com/mbarreca/gosix/api"
	"github.com/mbarreca/gosix/client"
	"github.com/mbarreca/gosix/consumer"
	"github.com/mbarreca/gosix/models"
)

type GlobalRule struct {
	client *client.Client
	c      *consumer.Consumer
}

// Constructor - You *shouldn't* be using this
func New(c *client.Client, consumer *consumer.Consumer) *GlobalRule {
	return &GlobalRule{client: c, c: consumer}
}

// Gets the GlobalRule attached to an ID
// id -> A specific GlobalRule to get
func (g *GlobalRule) Get(id string) (models.GlobalRule, error) {
	resp, err := api.API[models.GlobalRule, models.Get](id, "", models.GlobalRule{}, g.client)
	if err != nil {
		return models.GlobalRule{}, err
	}
	return *resp.(models.Object[models.GlobalRule]).Value, nil
}

// Get all GlobalRules
func (g *GlobalRule) GetAll() ([]models.GlobalRule, error) {
	resp, err := api.API[models.GlobalRule, models.Get]("", "", models.GlobalRule{}, g.client)
	if err != nil {
		return nil, err
	}
	var ret []models.GlobalRule
	credentials := resp.(models.All[models.GlobalRule])
	for _, credential := range *credentials.Objects {
		ret = append(ret, *credential.Value)
	}
	return ret, nil
}

// Create a GlobalRule, leave the ID blank for an autogenerated ID
// id -> ID of the GlobalRule
// globalrule -> GlobalRule Object
func (g *GlobalRule) Create(id string, globalrule models.GlobalRule) error {
	if id == "" {
		return errors.New("You must provide an ID to create a global rule")
	}
	_, err := api.API[models.GlobalRule, models.Create](id, "", globalrule, g.client)
	if err != nil {
		return err
	}
	return nil
}

// Update a GlobalRule
// id -> ID of the GlobalRule
// globalrule -> GlobalRule Object
func (g *GlobalRule) Update(id string, globalrule models.GlobalRule) error {
	_, err := api.API[models.GlobalRule, models.Update](id, "", globalrule, g.client)
	if err != nil {
		return err
	}
	return nil
}

// Delete a GlobalRule
// id -> ID of the GlobalRule
func (g *GlobalRule) Delete(id string) error {
	_, err := api.API[models.GlobalRule, models.Delete](id, "", models.GlobalRule{}, g.client)
	if err != nil {
		return err
	}
	return nil
}
